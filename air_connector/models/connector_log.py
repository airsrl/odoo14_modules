from odoo import api, fields, models, _
from ..code import woocommerce_utils as wu
from ..code import connector_utils as cu
from ..code import odoo_utils as ou


class connector_log(models.Model):
	_name = "connector.log"
	_description = "AIR connector Ecommerce operations log"

	creation_date = fields.Datetime("Date", readonly=True)
	model = fields.Char(string="Model", readonly=True)
	record_id = fields.Integer(string="Record id", readonly=True)
	operation = fields.Char(string="Operation", readonly=True)
	execution_date = fields.Datetime(string="Exec. date", readonly=True)
	status = fields.Char(string="Status", readonly=True)
	response = fields.Char(string="Response", readonly=True)
	notes = fields.Text(string="Notes")

	def force_export_image(self):
		barcodes = [8806090696534, 8806090572234, 8806090572227, 8806090572210, 8806090545931, 8806090545924, 8806090545917, 8806090545900, 8806090545894, 8806090312434, 8806090295546, 8806090295539, 8801643628116, 8801643628093, 8801643628086, 8801643628079, 3499550333602, 8806094355796, 7340172703464, 7340172703471, 7340172703891, 7340172704713, 7340172704720, 7340172704737, 7340172703082, 7340172703013, 7340172703020, 7340172703570, 7340172703631, 7340172703037, 8806094938142, 8806094786569, 8806094786491, 4719072939113, 4719072939465, 4711387016411, 4711081951582, 4711081958901, 4719072963262, 4711377087810, 4711377087797, 4711377035347, 4711377025973, 4711377038348, 8806094769333, 8806094672152, 8806092090484, 8806094769197, 8806094791778, 8806094796568, 8806094760354, 8806094771831, 8806094935028, 8806094938197, 8806094786514, 8806092231627, 4711081964391, 4711387038192, 4711081947493, 4711387025741, 4711387008249, 4711387114063, 4711387120002, 4711081963578, 4711081912118, 4711081923381, 4711081905578, 4711081905608, 4711081988090, 4711387017852, 4711387006177, 4711387113226, 8806094594645, 8806094594652, 6933412715061, 730143314930, 6933412710301, 6933412796114, 6933412725527, 6933412711391, 6933412701729, 6933412700258, 6933412774976, 6933412774945, 6933412728191, 5032037260312, 6933412715078, 4719512123188, 4719512123195, 4719512123201, 7340172702894, 7340172702160, 7340172702122, 4044951038220, 6933412716716, 7340172704003, 7340172703983, 8806094656527, 8806094771787, 8806094771862, 4711387179727, 6933412728092, 4711377079600, 4711377066891, 4711377079631, 4711377079655, 4711377066594, 4718006455224, 4719072977061, 4711377020343, 4712477115236, 4711377026109, 4711377026000, 6933412728290, 6933412728283, 4711377121040, 4718017058155, 4711081885610, 4711387048153, 4718017039635, 4718017039574, 4711081927617, 4711081943273, 4023125029738, 4023125029912, 4711081233077, 4711081236450, 4711377084284, 7340172702108, 4711081145905, 4711081036746, 4711387275504, 4718017724289, 4711081786412, 4711081236290, 4711377026697, 4718017375788, 4711377035330, 4711377041706, 4711377041690, 4719072978198, 4711377080354, 4711387312483, 4711081721901, 4711081786733, 4711377001151, 4711387228937, 4044951032105, 4719512126776, 4711081786573, 4711081786252, 4711081721703, 4718017724159, 4711081722366, 4711377022521, 4711377031837, 4044951039074, 4711387173244, 8806092802117, 4044951038251, 4044951038534, 6933412728382, 4044951016037, 4044951038510, 4044951038619, 4044951039111, 4044951038527, 4044951034314, 4044951039098, 4044951034321, 4044951038244]
		for barcode in barcodes:
			record = self.env['product.template'].search([('barcode', '=', barcode)])
			cu.add_new_log_entry(
				self,
				'product.template',
				record.id,
				'sync_product_image',
				cu.log_status.pending,
				'product.template - write'
			)

	def force_export_pricelist(self):
		barcodes = ['040835250379', '040835250393', '040835250447', '0194552419073', '0194552877613', '0195235532638', '0195713801201', '0638370134720', '0663296423771', 667380785882, 667380785899, '0667380785981', 667380785998, '0718037856001', '0718037856254', '0718037858098', '0718037860947', '0718037875804', 718037875880, 718037875897, '0718037882413', 718037887333, '0718037891309', '0718037891378', 719392167573, '0730143312042', 730143314121, 730143314190, 730143314275, 730143314428, 730143314497, 730143314534, 730143314558, 730143314916, '0740617261219', 740617299595, 740617300116, 740617318364, 740617318388, 740617318449, 740617319040, 740617319064, 740617319071, 740617319101, 740617319118, 740617319125, 740617319415, 740617319422, 740617319439, 740617319729, 740617319736, 740617319781, 740617319798, 740617319828, 740617319842, 740617319873, 740617319880, 740617322002, '0740617324242', 740617324358, 740617324365, 740617324389, 740617324501, 740617324716, 740617325911, 740617326123, 740617326147, 740617326567, 740617328486, 740617328509, 740617328523, 740617328530, 740617328547, 740617328561, 740617328646, 740617329742, 740617329780, 740617329797, '0740617329803', 740617329810, 740617330342, 740617330380, 740617330731, 740617330748, '0740617331431', '0740617331448', '0740617331653', '0740617331943', 740617333411, '0740617339383', '0740617339406', '0740617339437', '0740617339451', '0740617339468', '0740617339482', 751492680903, '0763649110928', 3362932912170, 3362932913771, 3362932914679, 3362932914891, 3362932915119, 3362932915553, 3362932915577, 3362932915591, 3362932915799, 3362934001056, 3362934001940, 3362934002459, 3362934002848, 3362934110031, 3362934110208, 3362934110420, 3362934112295, 3362934402150, 3362934402600, 3362934402662, 4023125029912, 4044951013623, 4044951013951, 4044951013968, 4044951016037, 4044951016426, 4044951016433, 4044951019250, 4044951019298, 4044951019311, 4044951021536, 4044951026265, 4044951026685, 4044951027156, 4044951027163, 4044951028153, 4044951028306, 4044951028948, 4044951028962, 4044951029990, 4044951030170, 4044951030231, 4044951030415, 4044951030422, 4044951030606, 4044951030859, 4044951032006, 4044951032105, 4044951032112, 4044951032129, 4044951032198, 4044951032204, 4044951032211, 4044951032235, 4044951032327, 4044951032334, 4044951032341, 4044951032938, 4044951033522, 4044951033546, 4044951034321, 4044951034970, 4044951034987, 4044951034994, 4044951035007, 4044951035014, 4044951035021, 4044951035038, 4044951035045, 4044951035076, 4044951035090, 4044951037544, 4044951037551, 4044951038008, 4044951038015,
					4044951038237, 4044951038541, 4044951038565, 4044951039104,	4044951040032, 4710180326925, 4710273770772, 4710273771113, 4710273771120, 4710273773056, 4710273773414, 4710273774916, 4710273776873, 4710273776965, 4710273779775, 4710562759853, 4710886252535, 4711081134732, 4711081145905, 4711081198390, 4711081236061, 4711081236290, 4711081236450, 4711081438779, 4711081442714, 4711081447320, 4711081469612, 4711081722366, 4711081760351, 4711081772453, 4711081883937, 4711081886419, 4711081888048, 4711081892816, 4711081894537, 4711081905578, 4711081905660, 4711081912118, 4711081912767, 4711081936688, 4711081936732, 4711081936879, 4711081936893, 4711081937227, 4711081937449, 4711081941088, 4711081943013, 4711081943099, 4711081964780, 4711081970309, 4711081988090, 4711081988984, 4711085936899, 4711085937520, 4711085937803, 4711085942463, 4711377001151, 4711377004879, 4711377010122, 4711377010153, 4711377010184, 4711377010191, 4711377012881, 4711377019224, 4711377019231, 4711377027922, 4711377027939, 4711377028363, 4711377034210, 4711377035330, 4711377059572, 4711377076562, 4711377078603, 4711377079600, 4711377079655, 4711377086561, 4711377086578, 4711377087810, 4711377102551, 4711377103862, 4711377115087, 4711377115094, 4711377115476, 4711377122108, 4711377128889, 4711377132275, 4711377132855, 4711377134415, 4711377134439, 4711377134620, 4711377134712, 4711377134798, 4711377134958, 4711377138901, 4711377140119, 4711377143622, 4711377143660, 4711377144797, 4711377151528, 4711377170680, 4711377170734, 4711377171229, 4711377171243, 4711377173780, 4711377174046, 4711377176811, 4711377197014, 4711377197069, 4711387004456, 4711387006917, 4711387008249, 4711387016411, 4711387025741, 4711387028476, 4711387050507, 4711387114063, 4711387128176, 4711387139349, 4711387182796, 4711387190579, 4711387225035, 4711387275504, 4711387275962, 4711387285718, 4711387324547, 4711387338490, 4711387356548, 4711387357347, 4711387361115, 4711387367629, 4711387370872, 4711387414576, 4711387423769, 4711387437834, 4711387437858, 4711387450871, 4711387451113, 4711387453117, 4711387459218, 4711387461365, 4711387493625, 4712477115236, 4712883217272, 4712883217548, 4712883217555, 4712883217562, 4712883217746, 4712883218033, 4712883218040, 4712960133709, 4712960134805, 4712960137196, 4713213516805, 4713218469465, 4717964402363, 4718006455224, 4718017039574, 4718017058193, 4718017375917, 4718017472869, 4718017550949, 4718017646086, 4718017812788, 4718017862233, 4718755070068, 4718755073298, 4718755077098, 4718755080821, 4718755081545, 4718755084973, 4718755086588, 4718755086816,
					4718755086854, 4719072602338, 4719072606084, 4719072648015,	4719072654283, 4719072655204, 4719072673628, 4719072717100, 4719072720247, 4719072721374, 4719072728625, 4719072768195, 4719072790219, 4719072802929, 4719072806712, 4719072806729, 4719072807856, 4719072810160, 4719072813963, 4719072822552, 4719072829292, 4719072836412, 4719072845858, 4719072851453, 4719072858230, 4719072862862, 4719072864088, 4719072886509, 4719072886547, 4719072886608, 4719072888633, 4719072902698, 4719072908225, 4719072932220, 4719072937867, 4719072939465, 4719072940713, 4719072940720, 4719072941314, 4719072945589, 4719072955564, 4719072957421, 4719072957452, 4719072960964, 4719072963262, 4719072967222, 4719072978198, 4719512030394, 4719512041802, 4719512052624, 4719512053102, 4719512053379, 4719512055847, 4719512060513, 4719512063408, 4719512064542, 4719512064757, 4719512065488, 4719512071373, 4719512072165, 4719512074640, 4719512077641, 4719512082904, 4719512084021, 4719512084472, 4719512084762, 4719512085028, 4719512087398, 4719512087671, 4719512088913, 4719512090749, 4719512091258, 4719512091418, 4719512094389, 4719512094532, 4719512094600, 4719512095102, 4719512095249, 4719512095287, 4719512097304, 4719512097601, 4719512097670, 4719512098226, 4719512098394, 4719512104071, 4719512104392, 4719512104552, 4719512106761, 4719512110355, 4719512110546, 4719512112373, 4719512113813, 4719512117873, 4719512120200, 4719512120361, 4719512120378, 4719512123003, 4719512123034, 4719512123195, 4719512123218, 4719512123461, 4719512123645, 4719512124154, 4719512124161, 4719512124192, 4719512124208, 4719512126776, 4719512127469, 4719512127698, 4719512128374, 4719512129975, 4719512130117, 4719512130872, 4719512131985, 4719512131992, 4719512133903, 4719512146880, 4719512146903, 4895106292086, 4895106293342, 4895106293618, 4895106294288, 4895106294332, 5032037214926, 5032037235907, 5032037235938, 5032037247030, 5032037258623, 5032037258715, 5032037278485, 5032037278508, 5060301695157, 5099206041899, 5099206053847, 5099206064201, 5099206064225, 5099206064294, 5099206065895, 5099206070509, 5099206079533, 5099206080270, 5099206080638, 5099206080720, 5099206080812, 5099206080904, 5099206081918, 5099206081963, 5099206082410, 5099206082779, 5099206085961, 5099206086050, 5099206086524, 5099206086869, 5099206087019, 5099206087316, 5099206088719, 5099206089167, 5099206089174, 5099206089181, 5099206089532, 5099206091733, 5099206091788, 5099206091801, 5099206095007, 5099206097483, 5099206097490, 5099206098657, 5099206101845, 5099206107090, 6933412701644, 6933412701927, 6933412702207,
					6933412710615, 6933412710653, 6933412712398, 6933412713050,	6933412713647, 6933412714835, 6933412714842, 6933412714859, 6933412714866, 6933412715061, 6933412715078, 6933412715177, 6933412715375, 6933412716716, 6933412716952, 6933412717034, 6933412717874, 6933412718734, 6933412727316, 6933412727491, 6933412727514, 6933412727590, 6933412727637, 6933412727774, 6933412727781, 6933412727835, 6933412727927, 6933412727972, 6933412727996, 6933412728108, 6933412728115, 6933412728191, 6933412728269, 6933412728382, 6933412728719, 6933412728764, 6933412728771, 6933412774440, 6933412774457, 6933412774570, 6933412774600, 6933412774617, 6933412774860, 6933412774907, 6933412774945, 6933412774976, 6933412775065, 6933412775089, 6933412775652, 6933412796114, 7340172702023, 7340172702313, 7340172702894, 7340172702931, 7340172702986, 7340172703037, 7340172703082, 7340172703143, 7340172703181, 7340172703303, 7340172703358, 7340172703471, 7340172703488, 7340172703631, 7340172703877, 7340172703891, 7340172703969, 7340172704706, 7340172704713, 7340172704720, 7340172704737, 7340172705932, 7350041081944, 7350041085867, 8712581746025, 8717496871879, 8717496872135, 8717496872975, 8717496873101, 8801643628086, 8801643628093, 8801643628116, 8806090195303, 8806090312403, 8806090312434, 8806090396007, 8806090396021, 8806090545900, 8806090545924, 8806090545931, 8806090572210, 8806090572234, 8806090952616, 8806090952630, 8806090952647, 8806090961748, 8806090980633, 8806092278028, 8806092614802, 8806092837683, 8806092883635, 8806094215021, 8806094338515, 8806094594652, 8806094672152, 8806094760354, 8806094769296, 8806094769333, 8806094771831, 8806094771862, 8806094786491, 8806094786514, 8806094786569, 8806094796308, 8806094796568, 8806094938104, 8806094938142, 8806094972252, 8806094988734, 8806094993950, 8806094993981, '3362934402471BAK0', '4711377044844BAK', '4719072763046BAK', '8717496872364BAK0', 'AkRigTMIannacconev1', 'BX8071512900K', 'BX8071512900KF', 'CS_HB_V1.5', 'CS_HB2CSSTC', 'CS_SW_R300_V2X', 'CS_SW_R320A_V2', 'CS_SW_RFLAT1_V2X', 'CS_SWFORM_V2.5', 'CS_SWFORM_V2.5X', 'CS_UHX_V2', 'CSL_DD180_F1EV2_PLC_EU', 'CSL_E_SW_WRC', 'CSL_P_LC', 'CSL_P_LCK', 'CSP_V3', 'CSS_SQ', 'GT_DD_RWP_PRO_BK180_EU', 'GT_DD_RWP_PRO_BK180_LCK', 'KitBAK0', 'KitSimNextLevel', 'KitSimResTechGT_V1', 'KitSimResTechX1_V1', 'MONITOR STN X1', 'P WB DD2 EU', 'P_WB_DD1_EU', 'RS6-S4-EU', 'RUG RES', 'SA-09', 'TR80-WM', 'TRX-ALP-WM-EU', 'X1 FANATEC DD SUPPORT']
		for barcode in barcodes:
			record = self.env['product.template'].search([('barcode', '=', barcode)])
			if record:
				record.compute_wp_price_list_id()
				cu.add_new_log_entry(
					self,
					'product.template',
					record.id,
					'sync_pricelist',
					cu.log_status.pending,
					'product.template pricelist - write'
				)

	def force_sync(self):
		"""Called menu action: connector_force_sync_menu """
		ou.log_info(f'force_sync {self}')

		try:
			self.task_exec_sync_product()
		except Exception as ex:
			ou.log_error(f'force_sync - task_exec_sync_product: {ex}')
			ou.log_exception(ex)
			pass

		try:
			self.task_exec_sync_product_set_to_private()
		except Exception as ex:
			ou.log_error(f'force_sync - task_exec_sync_product_set_to_private: {ex}')
			ou.log_exception(ex)
			pass

		try:
			self.task_exec_sync_product_image()
		except Exception as ex:
			ou.log_error(f'force_sync - task_exec_sync_product_image: {ex}')
			ou.log_exception(ex)
			pass

		try:
			self.task_exec_sync_stock_quantity()
		except Exception as ex:
			ou.log_error(f'force_sync - task_exec_sync_stock_quantity: {ex}')
			ou.log_exception(ex)
			pass

		try:
			self.task_exec_sync_product_pricelist()
		except Exception as ex:
			ou.log_error(f'force_sync - task_exec_sync_product_pricelist: {ex}')
			ou.log_exception(ex)
			pass

	def force_single_sync(self):
		"""Called by button - forces sync on the selected items """
		for task in self:
			ou.log_info(f'force_sync Task id: {task.id} - {task.status}')
			res = None
			if task.operation == 'sync_product':
				# Sync product details
				res = wu.wp_sync_product(self, task.record_id)
			if task.operation == 'sync_stock_qty':
				# Sync product qty
				res = wu.wp_sync_stock_qty(self, task.record_id)
			if task.operation == 'sync_product_image':
				# Sync product image
				res = wu.wp_sync_product_image(self, task.record_id)
			if task.operation == 'sync_product_set_to_private':
				# Sync product set status = private
				res = wu.wp_product_set_to_private(self, task.record_id)
			if task.operation == 'sync_pricelist':
				# Sync product pricelist and tags
				res = wu.wp_sync_product_pricelist(self, task.record_id)

			ou.log_info(f'force_single_sync - res: {res}')
			if not res:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], f'task.operation: {task.operation}')
			if res and res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)

	def task_exec_sync_product(self, limit=-1):
		"""Called by scheduled actions - Search tasks products to be updated on WP """
		if limit < 0:
			# Getting record number sync limit from the settings
			wp_sync_max_limit = int(ou.get_config_value(self.env, 'wp_sync_max_limit'))

		sync_product_tasks = self.env['connector.log'].sudo().search([('status', '=', cu.log_status.pending.value), ('operation', '=', 'sync_product')], limit=wp_sync_max_limit)
		if sync_product_tasks:
			ou.log_info(f'Num sync_product_tasks: {len(sync_product_tasks)}')

		for task in sync_product_tasks:
			ou.log_info(f'Task id: {task.id} - {task.status}')
			res = wu.wp_sync_product(self, task.record_id)
			ou.log_info(f'res: {res}')
			if res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)

	def task_exec_sync_product_image(self, limit=-1):
		"""Called by scheduled actions - Search tasks products images to be updated on WP """
		if limit < 0:
			# Getting record number sync limit from the settings
			wp_sync_max_limit = int(ou.get_config_value(self.env, 'wp_sync_max_limit'))

		sync_product_tasks = self.env['connector.log'].sudo().search([('status', '=', cu.log_status.pending.value), ('operation', '=', 'sync_product_image')], limit=wp_sync_max_limit)
		if sync_product_tasks:
			ou.log_info(f'Num sync_product_tasks: {len(sync_product_tasks)}')

		for task in sync_product_tasks:
			ou.log_info(f'Task id: {task.id} - {task.status}')
			res = wu.wp_sync_product_image(self, task.record_id)
			ou.log_info(f'res: {res}')
			if res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)

	def task_exec_sync_stock_quantity(self, limit=-1):
		"""Called by scheduled actions - Search tasks quantities to be updated on WP """
		if limit < 0:
			# Getting record number sync limit from the settings
			wp_sync_max_limit = int(ou.get_config_value(self.env, 'wp_sync_max_limit'))

		sync_stock_qty_tasks = self.env['connector.log'].sudo().search([('status', '=', cu.log_status.pending.value), ('operation', '=', 'sync_stock_qty')], limit=wp_sync_max_limit)
		if sync_stock_qty_tasks:
			ou.log_info(f'Num sync_stock_qty_tasks: {len(sync_stock_qty_tasks)}')

		for task in sync_stock_qty_tasks:
			ou.log_info(f'Task id: {task.id} - {task.status}')
			res = wu.wp_sync_stock_qty(self, task.record_id)
			if res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)

	def task_exec_sync_product_set_to_private(self, limit=-1):
		"""Called by scheduled actions - Search tasks quantities to be updated on WP """
		if limit < 0:
			# Getting record number sync limit from the settings
			wp_sync_max_limit = int(ou.get_config_value(self.env, 'wp_sync_max_limit'))

		sync_product_set_to_private = self.env['connector.log'].sudo().search([('status', '=', cu.log_status.pending.value), ('operation', '=', 'sync_product_set_to_private')], limit=wp_sync_max_limit)
		if sync_product_set_to_private:
			ou.log_info(f'Num sync_product_set_to_private: {len(sync_product_set_to_private)}')

		for task in sync_product_set_to_private:
			ou.log_info(f'Task id: {task.id} - {task.status}')
			res = wu.wp_product_set_to_private(self, task.record_id)
			if res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)

	def task_exec_sync_product_pricelist(self, limit = -1):
		"""Called by scheduled actions - Search tasks quantities to be updated on WP """
		if limit < 0:
			# Getting record number sync limit from the settings
			wp_sync_max_limit = int(ou.get_config_value(self.env, 'wp_sync_max_limit'))

		sync_pricelist = self.env['connector.log'].sudo().search(
			[('status', '=', cu.log_status.pending.value), ('operation', '=', 'sync_pricelist')],
			limit=wp_sync_max_limit)
		if sync_pricelist:
			ou.log_info(f'Num sync_pricelist: {len(sync_pricelist)}')

		for task in sync_pricelist:
			ou.log_info(f'Task id: {task.id} - {task.status}')
			res = wu.wp_sync_product_pricelist(self, task.record_id)
			if res[0]:
				cu.upd_log_entry(self, task.id, cu.log_status.complete, res[1], None)
			else:
				cu.upd_log_entry(self, task.id, cu.log_status.error, res[1], None)
